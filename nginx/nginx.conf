 events {
      worker_connections 1024;
  }

  http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      # Upstream for WebApp
      upstream webapp_backend {
          server webapp:3000;
      }

      # Resolver for dynamic API resolution
      resolver 127.0.0.11 valid=30s;

      # No need to include separate API config - handled in main config

      # Logging
      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

      access_log /var/log/nginx/access.log main;
      error_log /var/log/nginx/error.log;

      # Gzip compression
      gzip on;
      gzip_vary on;
      gzip_min_length 1024;
      gzip_proxied any;
      gzip_comp_level 6;
      gzip_types
          application/json
          application/javascript
          application/xml
          application/rss+xml
          application/atom+xml
          text/css
          text/plain
          text/xml
          text/javascript
          application/vnd.ms-fontobject
          application/x-font-ttf
          application/x-web-app-manifest+json
          application/xhtml+xml
          font/opentype
          image/svg+xml
          image/x-icon
          text/x-component;

      # HTTPS Server (Primary)
      server {
          listen 443 ssl http2;
          server_name portal.ollolife.com www.portal.ollolife.com;

          # SSL Configuration
          ssl_certificate /etc/letsencrypt/live/portal.ollolife.com/fullchain.pem;
          ssl_certificate_key /etc/letsencrypt/live/portal.ollolife.com/privkey.pem;
          ssl_protocols TLSv1.2 TLSv1.3;
          ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
          ssl_prefer_server_ciphers off;
          ssl_session_timeout 10m;
          ssl_session_cache shared:SSL:10m;
          ssl_session_tickets off;

          # Security headers for HTTPS
          add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
          add_header X-Frame-Options "SAMEORIGIN" always;
          add_header X-XSS-Protection "1; mode=block" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header Referrer-Policy "strict-origin-when-cross-origin" always;
          add_header Content-Security-Policy "default-src 'self' https: data: blob: 'unsafe-inline'" always;

          # Internal API proxy - routes to local API server (priority match)
          location ^~ /api/ {
              proxy_pass http://localhost:5000/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_connect_timeout 10s;
              proxy_send_timeout 10s;
              proxy_read_timeout 10s;
          }

          # Service Worker - must be served with correct headers
          location /ngsw-worker.js {
              proxy_pass http://webapp_backend;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              # Service Worker specific headers
              add_header Cache-Control "no-cache, no-store, must-revalidate";
              add_header Pragma "no-cache";
              add_header Expires "0";
              add_header Service-Worker-Allowed "/";
          }

          # Manifest file with proper MIME type
          location /manifest.webmanifest {
              proxy_pass http://webapp_backend;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              add_header Content-Type "application/manifest+json";
              add_header Cache-Control "public, max-age=31536000";
          }

          # PWA icons with long cache
          location ~* ^/icons/.+\.(png|jpg|jpeg|gif|ico|svg)$ {
              proxy_pass http://webapp_backend;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              add_header Cache-Control "public, max-age=31536000, immutable";
          }

          # Static assets with caching
          location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
              proxy_pass http://webapp_backend;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              add_header Cache-Control "public, max-age=86400";
          }

          # WebApp - all other requests
          location / {
              proxy_pass http://webapp_backend;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_cache_bypass $http_upgrade;
              
              # PWA headers
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
          }

          # Error pages
          error_page 404 /index.html;
          error_page 500 502 503 504 /50x.html;

          location = /50x.html {
              return 500 "Internal Server Error";
          }
      }

      # API + Swagger Server (Port 8080 - Internal Only)
      server {
          listen 8080;
          server_name localhost _;

          # Internal network access only
          allow 127.0.0.1;
          allow 10.0.0.0/8;
          allow 172.16.0.0/12;
          allow 192.168.0.0/16;
          deny all;

          # API routes - direct connection (priority match)
          location ^~ /api/ {
              proxy_pass http://localhost:5000/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header X-Forwarded-Host $host;
              proxy_set_header X-Forwarded-Port $server_port;
              proxy_connect_timeout 60s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
              error_page 502 503 504 = @api_unavailable;
          }

          # Swagger documentation - FIXED: No redirect loop
          location /swagger {
              proxy_pass http://host.docker.internal:5000/swagger;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header X-Forwarded-Host $host;
              proxy_set_header X-Forwarded-Port $server_port;
              proxy_connect_timeout 60s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
              error_page 502 503 504 = @api_unavailable;
          }

          # Swagger sub-routes (index.html, css, js, etc.)
          location /swagger/ {
              proxy_pass http://host.docker.internal:5000/swagger/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header X-Forwarded-Host $host;
              proxy_set_header X-Forwarded-Port $server_port;
              proxy_connect_timeout 60s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
              error_page 502 503 504 = @api_unavailable;
          }

          # API unavailable fallback
          location @api_unavailable {
              return 503 "API service temporarily unavailable";
              add_header Content-Type text/plain;
          }

          # Health check endpoint
          location /health {
              proxy_pass http://host.docker.internal:5000/health;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              
              # Allow CORS for health checks
              add_header 'Access-Control-Allow-Origin' '*' always;
              add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
          }

          # Root returns API info instead of redirect
          location = / {
              return 200 'Ollo Lifestyle API - Access /swagger for documentation, /health for status, /api/ for endpoints';
              add_header Content-Type text/plain;
          }
      }

      # HTTP to HTTPS Redirect
      server {
          listen 80;
          server_name portal.ollolife.com www.portal.ollolife.com;
          
          # Redirect all HTTP requests to HTTPS
          return 301 https://$server_name$request_uri;
      }

      # HTTP Server (for localhost and internal access)
      server {
          listen 80;
          server_name localhost _;

          # Security headers
          add_header X-Frame-Options "SAMEORIGIN" always;
          add_header X-XSS-Protection "1; mode=block" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header Referrer-Policy "no-referrer-when-downgrade" always;
          add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

          # Service Worker - must be served with correct headers
          location /ngsw-worker.js {
              proxy_pass http://webapp_backend;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              # Service Worker specific headers
              add_header Cache-Control "no-cache, no-store, must-revalidate";
              add_header Pragma "no-cache";
              add_header Expires "0";
              add_header Service-Worker-Allowed "/";
          }

          # Manifest file with proper MIME type
          location /manifest.webmanifest {
              proxy_pass http://webapp_backend;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              add_header Content-Type "application/manifest+json";
              add_header Cache-Control "public, max-age=31536000";
          }

          # PWA icons with long cache
          location ~* ^/icons/.+\.(png|jpg|jpeg|gif|ico|svg)$ {
              proxy_pass http://webapp_backend;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              add_header Cache-Control "public, max-age=31536000, immutable";
          }

          # Static assets with caching
          location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
              proxy_pass http://webapp_backend;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              add_header Cache-Control "public, max-age=86400";
          }

          # WebApp - all other requests
          location / {
              proxy_pass http://webapp_backend;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_cache_bypass $http_upgrade;
              
              # PWA headers
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
          }

          # Error pages
          error_page 404 /index.html;
          error_page 500 502 503 504 /50x.html;

          location = /50x.html {
              return 500 "Internal Server Error";
          }
      }
  }