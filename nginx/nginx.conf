 events {
      worker_connections 1024;
  }

  http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      # Upstream for WebApp
      upstream webapp_backend {
          server webapp:3000;
      }

      # API Service (separate project via Docker network)
      upstream api_backend {
          server ollo-api:5000;
      }

      # No need to include separate API config - handled in main config

      # Logging
      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

      access_log /var/log/nginx/access.log main;
      error_log /var/log/nginx/error.log;

      # Gzip compression
      gzip on;
      gzip_vary on;
      gzip_min_length 1024;
      gzip_proxied any;
      gzip_comp_level 6;
      gzip_types
          application/json
          application/javascript
          application/xml
          application/rss+xml
          application/atom+xml
          text/css
          text/plain
          text/xml
          text/javascript
          application/vnd.ms-fontobject
          application/x-font-ttf
          application/x-web-app-manifest+json
          application/xhtml+xml
          font/opentype
          image/svg+xml
          image/x-icon
          text/x-component;

      # WebApp Server
      server {
          listen 80;
          server_name portal.ollolife.com www.portal.ollolife.com localhost _;

          # Security headers
          add_header X-Frame-Options "SAMEORIGIN" always;
          add_header X-XSS-Protection "1; mode=block" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header Referrer-Policy "no-referrer-when-downgrade" always;
          add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

          # WebApp - all requests
          location / {
              proxy_pass http://webapp_backend;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_cache_bypass $http_upgrade;
          }

          # Error pages
          error_page 404 /index.html;
          error_page 500 502 503 504 /50x.html;

          location = /50x.html {
              return 500 "Internal Server Error";
          }
      }

      # API + Swagger Server (Port 8080 - Internal Only)
      server {
          listen 8080;
          server_name localhost _;

          # Internal network access only
          allow 127.0.0.1;
          allow 10.0.0.0/8;
          allow 172.16.0.0/12;
          allow 192.168.0.0/16;
          deny all;

          # API routes
          location /api/ {
              rewrite ^/api/(.*) /$1 break;
              proxy_pass http://api_backend;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }

          # Swagger documentation
          location /swagger {
              proxy_pass http://api_backend/swagger;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }

          # Root redirects to swagger
          location = / {
              return 302 /swagger;
          }
      }
  }