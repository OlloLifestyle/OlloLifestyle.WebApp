name: Deploy Angular App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: ollolifestyle-webapp
  DOCKER_USERNAME: dayandev  # Replace with your Docker Hub username

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test -- --watch=false --browsers=ChromeHeadless
      
    - name: Build Angular app
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 1

  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: [build-and-test, build-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          # Navigate to application directory
          cd /opt/ollo-webapp
          
          # Create backup of current deployment
          if [ -d "backup" ]; then
            rm -rf backup.old
            mv backup backup.old
          fi
          mkdir -p backup
          
          # Backup current docker-compose and .env files
          if [ -f docker-compose.yml ]; then
            cp docker-compose.yml backup/
          fi
          if [ -f .env ]; then
            cp .env backup/
          fi
          
          # Pull latest code and deployment files
          git pull origin main || git pull origin master
          
          # Pull latest Docker image
          docker pull ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          
          # Stop existing containers
          docker-compose down || true
          
          # Start new containers
          docker-compose up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Health check
          if ! curl -f http://localhost:3000/health 2>/dev/null; then
            echo "Health check failed, rolling back..."
            docker-compose down
            if [ -f backup/docker-compose.yml ]; then
              cp backup/docker-compose.yml .
            fi
            if [ -f backup/.env ]; then
              cp backup/.env .
            fi
            docker-compose up -d
            exit 1
          fi
          
          # Cleanup old images
          docker image prune -f
          
          echo "Deployment completed successfully!"
          echo "Angular app is running at: http://192.168.50.98:3000"